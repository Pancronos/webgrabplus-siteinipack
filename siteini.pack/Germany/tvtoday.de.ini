﻿﻿**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: tvtoday.de
* @MinSWversion: V5.1
* @Revision 22 - [16/06/2025] Mat8861
* @Revision 21 - [12/06/2022] Japangelo
* @Revision 20 - [26/07/2018] Blackbear199
*  - separate regional channels
* @Revision 19 - [09/04/2018] Blackbear199
*  - episode scrub fix
* @Revision 18 - [09/01/2018] Blackbear199
*  - removeduplicate shows w/same start time(regionals)
* @Revision 17 - [19/09/2017] Blackbear199
*  - retwrite
* @Revision 16 - [24/07/2016] Blackbear199
*  - subtitle fix
* @Revision 15 - [12/07/2016] Blackbear199
*  - partial rewrite,changed url_index,alot code from Christoph21x original ini reused
* @Revision 14 - [25/05/2016] Blackbear199
*   Change start/stop to use unix times,set timezone to UTC
* @Revision 13 - [12/09/2015] Christoph21x
*   Adopted site changes of index and detail pages
*	Added support for original title
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=tvtoday.de|timezone=Europe/Berlin|maxdays=12|cultureinfo=de-DE|charset=UTF-8|titlematchfactor=90|ratingsystem=FSK}
*site {episodesystem=xmltv_ns}
*
scope.range{(urlindex)|end}
url_index{url|https://www.tvtoday.de/programm/standard/sender/##channel##.html?&date=|urldate|}
url_index.headers {customheader=Accept-Encoding=gzip,deflate}
urldate.format {datestring|yyMMdd}
global_temp_1.modify {set|'config_site_id'}
url_index.modify {replace|##channel##|'global_temp_1'}
index_urlchannellogo.modify {addstart|https://images.tvtoday.de/sender/small/'config_site_id'.png}
end_scope
*
index_showsplit.scrub {regex()||<li class="tv-tip time-listing js-tv-show" data-start-time=.*?</a>\s*</li>||}
index_showsplit.modify {replace(type=regex)|\!\?\?\!|#}
**index_showsplit.modify {(debug)}

scope.range {(indexshowdetails)|end}
index_start.scrub {single|data-start-time="||"|"}
index_stop.scrub {single|data-end-time="||"|"}
index_title.scrub {single|<span class="tv-tip-heading">||</span>|</span>}
index_category.scrub {regex||<span class="genre">([^,]*),.*?||}
index_country.scrub {regex||<span class="genre">[^,]*,(.+?)\d{4}||}
index_country.modify {replace|/|\|}
index_country.modify {substring(type=element)|0 2}
index_temp_4.scrub {single|<p class="small-meta description">||</p>|</p>}
index_subtitle.scrub {regex||<p\sclass="small-meta description">([^<]*)<\/p><\/*div||}
index_productiondate.scrub {single|<span class="genre">||</span>|</span>}
index_subtitle.modify {clear(~ 'index_productiondate')}
index_starrating.scrub {single|data-rating="||"|"}
index_starrating.modify {addend(not "")|/3}
index_showicon.scrub{single|<picture>|<img src="|"|/>}
index_showicon.modify {remove(type=regex)|\?.*?$}
index_urlshow {url|https://www.tvtoday.de|<a href="||"|"}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate,br}
end_scope
*
scope.range{(showdetails)|end}
title.modify {addstart|'index_title'}
*
titleoriginal.scrub {single|<dt>Originaltitel:</dt>|<dd>|</dd>|</dd>}
titleoriginal.modify {clear('title')}
titleoriginal.modify {addend(not "")|(lang=en)}
country.scrub {single(separator="/")|<dt>Land:</dt>|<dd>|</dd>|</dd>}
productiondate.scrub{single|<dt>Jahr:</dt>|<dd>|</dd>|</dd>}
rating.scrub {single|<dt>Altersfreigabe:</dt>|<dd>|</dd>|</dd>}
rating.modify{remove|Jahre}
*
subtitle.scrub {single(exclude="Folge")|"shortTitle": "||",|",}
subtitle.modify {cleanup(tags="<"">")}
*
description.scrub {multi|<p class="main-copy">||</p>|</p>}
description.modify {remove(type=regex)|<div class="banner-container">.*$}
description.modify {cleanup(tags="<"">")}
description.modify {cleanup}
description.modify {remove|(Senderinfo)}
*
director.scrub {single(separator=", " max=2)|<dt>Regisseur</dt>|<dd>|</dd>|</dd>}
writer.scrub {single(separator=", " max=2)|<dt>Drehbuch</dt>|<dd>|</dd>|</dd>}
producer.scrub {single(separator=", " max=2)|<dt>Produzent</dt>|<dd>|</dd>|</dd>}
composer.scrub {single(separator=", " max=2)|<dt>Musik</dt>|<dd>|</dd>|</dd>}
temp_6.scrub {multi|Darsteller</h3>||</div>|</div>}
actor.modify {substring(type=regex)|'temp_6' "<dt>([^<]*)<\/dt>"}
temp_1.modify {substring(type=regex)|'temp_6' "<dd>([^<]*)<\/dd>"}
temp_2.modify {set|0} 
loop{(each "temp_3" in 'actor')|end} 
temp_4.modify {substring(type=element)|'temp_1' 'temp_2' 1} 
temp_4.modify {addstart(not "")|(role=} 
temp_4.modify {addend(~ "role=")|)} 
temp_5.modify {addend|'temp_3''temp_4'##} 
temp_2.modify {calculate(format=F0)|1 +} 
end_loop 
actor.modify {set|'temp_5'} 
actor.modify {replace|##|\|}
*
presenter.scrub {multi(max=2)|<li class='title'>Moderation:</li>|<li>|</li>|</ul>}
description.modify {remove(separator=", ")|Moderation: 'presenter'}
*
description.modify {remove(type=regex)|\d+\. Staffel, Episode \d+:\s*}
description.modify {addstart("")|Keine Details!}
*
episode.scrub {regex(pattern="St. 'S1',Folge 'E1'/'Et1'""Folge 'E1'/'Et1'""Folge 'E1'")||<li class="h8">\s*((?:St\.\s*\d+,\s*)?Folge\s*\d+(?:\/\d+)?)[^<]*<\/li>||}
*
premiere.scrub {multi(include="neu")|data-style="elements/tv-show-mark">||</span>|</span>}
premiere.modify {replace|neu|true}
*
starrating.scrub {single|<div class="additional-labels">|data-rating="|"|</div>}
starrating.modify {addend|$%&Humor:'{single|Humor</h6>|data-rating="|">|</div>}'}
starrating.modify {addend|$%&Anspr.:'{single|Anspruch</h6>|data-rating="|">|</div>}'}
starrating.modify {addend|$%&Action:'{single|Action</h6>|data-rating="|">|</div>}'}
starrating.modify {addend|$%&Span.:'{single|Spannung</h6>|data-rating="|">|</div>}'}
starrating.modify {addend|$%&Ero.:'{single|Erotik</h6>|data-rating="|">|</div>}'}
starrating.modify {replace|$%&|\|}
starrating.modify {remove(== "Humor:")|Humor:}
starrating.modify {remove(== "Anspr.:")|Anspr.:}
starrating.modify {remove(== "Action:")|Action:}
starrating.modify {remove(== "Span.:")|Span.:}
starrating.modify {remove(== "Ero.:")|Ero.:}
starrating.modify {addend(notnull)|/3}
*
end_scope

**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index {url|https://www.tvtoday.de/programm/standard/sender/}
*url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
*
*scope.range {(channellist)|end}
*index_site_id.scrub {multi|class="js-track-click" href="|/programm/standard/sender/|.html" title="|">}
*index_site_channel.scrub {multi|class="js-track-click" href="|title="|"|>}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
